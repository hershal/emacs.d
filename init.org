* init.org
** introduction
** use-package
First we must initialize use-package.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+END_SRC
** whoami
Who am I?

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Hershal Bhave"
      user-mail-address "hershal.bhave@gmail.com")
#+END_SRC
** misc-defaults
Let's set some (sensible) defaults that don't go anywhere else.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ring-bell-function 'ignore)
  (setq search-whitespace-regexp "[ \t\r\n\-]+")
#+END_SRC
** hb-mode
Set up hb-mode and hb-mode-map.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar hb-mode-map (make-keymap) "hb-mode keymap.")
  (define-minor-mode hb-mode
    "Toggle hb-mode.
       A minor mode so that my key settings override any major modes'."
    t " hb" 'hb-mode-map)
  (hb-mode 1)               ;enable my minor mode, except in minibuffer
  (diminish 'hb-mode)
  (add-hook 'minibuffer-setup-hook (lambda() (hb-mode 0)))
#+END_SRC
** test-map

* os-specific
** linux
* general
** window system
These usually exist when using a window system. Let's make that not
so.
#+BEGIN_SRC emacs-lisp :tangle yes
  (if (window-system)
      (progn (scroll-bar-mode 0)
             (tool-bar-mode 0)
             (blink-cursor-mode 0)
             (set-fringe-mode 0)))
#+END_SRC

This exists regardless of whether we use a windowing system, so
disable those too.
#+BEGIN_SRC emacs-lisp :tangle yes
(menu-bar-mode 0)
#+END_SRC

** portables
Activate display-battery-mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (display-battery-mode 1)
#+END_SRC

** nuisances
Remove the yes-or-no prompts and replace them with y-or-n.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Also remove all dialog boxes
#+BEGIN_SRC emacs-lisp :tangle yes
  (defadvice yes-or-no-p (around prevent-dialog activate)
    "Prevent yes-or-no-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it))
  (defadvice y-or-n-p (around prevent-dialog-yorn activate)
    "Prevent y-or-n-p from activating a dialog"
    (let ((use-dialog-box nil))
      ad-do-it))
#+END_SRC

** general-bindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key hb-mode-map (kbd "C-c C-m") 'recompile)
  (define-key hb-mode-map (kbd "C-c m") 'compile)
  (define-key hb-mode-map (kbd "C-x C-b") 'ido-switch-buffer)
  (define-key hb-mode-map (kbd "C-x O") 'ff-find-other-file)
  (define-key hb-mode-map (kbd "C-'") 'execute-extended-command)
  (define-key hb-mode-map (kbd "C-x C-h") 'hb-delete-trailing-whitespace-untabify)
  (define-key hb-mode-map (kbd "M-|") 'transpose-frame)
  (define-key hb-mode-map (kbd "C-M-S-q") 'fill-region-as-paragraph)
  (define-key hb-mode-map (kbd "M-'") 'query-replace)
  (define-key hb-mode-map (kbd "M-\"") 'query-replace-regexp)
  (define-key hb-mode-map (kbd "M-Q") 'auto-fill-mode)
  (define-key hb-mode-map (kbd "C-o") 'split-line)
  (define-key hb-mode-map (kbd "C-x K") 'kill-buffer-and-window)
  (define-key hb-mode-map (kbd "C-x C-S-f") 'find-file-other-window)
  (define-key hb-mode-map (kbd "C-'") 'execute-extended-command)
  (bind-key "M-SPC" 'cycle-spacing hb-mode-map)
#+END_SRC
** general-general
Very general stuff here. I don't know where to categorize this, so
general-general.
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-auto-revert-mode t)
  (set-buffer-file-coding-system 'unix)
  (setq-default indent-tabs-mode nil)

  ;;; show paren mode
  (show-paren-mode t)
  (setq show-paren-style 'mixed)

  (setq vc-follow-symlinks t)
  (setq ediff-auto-refine 'on)
  (setq ring-bell-function 'ignore)
  (setq backup-directory-alist `((".*" . , "~/.emacs-backups/")))
  (setq tramp-auto-save-directory "~/.emacs-backups/")
  (setq kill-whole-line t)
  (setq size-indication-mode t)

  (setq display-time-24hr-format t)
  (setq display-time-mode t)
#+END_SRC

** hydras
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq scroll-amount 10)
  (defhydra hb/hydra-movement (hb-mode-map "M-n" :color red)
    "movement"
    ("j"     (scroll-up scroll-amount)     "down")
    ("k"     (scroll-down scroll-amount)   "up")
    ("n"     hb/scroll-up-halfpage         "down half")
    ("p"     hb/scroll-down-halfpage       "up half")
    ("SPC"   scroll-up                     "down full")
    ("S-SPC" scroll-down                   "up full")
    ("s"     isearch-forward               "isearch")
    ("v"     visual-line-mode              "visual-line")
    ("a"     auto-fill-mode                "auto-fill-mode")
    ("f"     follow-mode                   "follow-mode")
    ("w"     ace-window                    "ace-window")
    ("8"     follow-mode-80-char-compliant "follow-mode-80-char"))
#+END_SRC
* packages
** ace-window
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-window
    :ensure t
    :init (progn
            (bind-key "M-p" 'ace-window hb-mode-map)
            (setq aw-leading-char-style 'path
                  aw-keys (number-sequence 97 (+ 97 26)))
            (custom-set-faces '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC
** auto-complete
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-complete
    :ensure t
    :init (setq ac-use-menu-map t)
    :config (progn
              (ac-config-default)
              (setq-default ac-auto-show-menu 0.1)
              (setq-default ac-sources (append '(ac-source-imenu) ac-sources))
              (define-key ac-menu-map (kbd "C-n") nil)
              (define-key ac-menu-map (kbd "C-p") nil)
              (global-auto-complete-mode))
    :diminish "")
#+END_SRC
** bind-key
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bind-key
    :ensure t)
#+END_SRC
** bliss-theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bliss-theme
    :ensure t
    :config (load-theme 'bliss t))
#+END_SRC
** TODO desktop-mode
** diminish
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package diminish
    :ensure t
    :commands diminish)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
      :ensure t
      :config
      (bind-key "C-=" 'er/expand-region hb-mode-map )
      (bind-key "C-+" 'er/contract-region) hb-mode-map )
#+END_SRC
** icomplete+
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package icomplete+
    :ensure t
    :config (icomplete-mode))
#+END_SRC
** ido-hacks
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ido-hacks
    :ensure t
    :init (progn
            (ido-mode t)
            (setq ido-enable-flex-matching t
                  ido-everywhere t
                  ido-max-directory-size 100000
                  ido-create-new-buffer 'always
                  ido-default-file-method 'selected-window
                  ido-default-buffer-method 'selected-window)))
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb-mc-config ()
        (defvar jc/mc-search--last-term nil)
        (defun jc/mc-search (search-command)
          ;; Read new search term when not repeated command or applying to fake cursors
          (when (and (not mc--executing-command-for-fake-cursor)
                     (not (eq last-command 'jc/mc-search-forward))
                     (not (eq last-command 'jc/mc-search-backward)))
            (setq jc/mc-search--last-term (read-from-minibuffer "Search: ")))
          (funcall search-command jc/mc-search--last-term))
        (defun jc/mc-search-forward ()
          "Simplified version of forward search that supports multiple cursors"
          (interactive)
          (jc/mc-search 'search-forward))
        (defun jc/mc-search-backward ()
          "Simplified version of backward search that supports multiple cursors"
          (interactive)
          (jc/mc-search 'search-backward)))

  (use-package multiple-cursors
    :idle 1
    :config (progn
            (hb-mc-config)))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package org
      :init (progn (setq org-src-window-setup 'other-window
                         org-startup-indented t))
      :diminish org-indent-mode)
#+END_SRC
* paredit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paredit
      :ensure t
      :config (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
      :diminish "")
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
    :config (global-undo-tree-mode)
    :diminish "")
#+END_SRC
** TODO uniquify
** hydra
#+BEGIN_SRC emacs-lisp :tangle yes
     (use-package hydra
       :ensure t)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :idle 5
    :commands magit-status
    :init (progn (bind-key "C-c g" 'magit-status hb-mode-map)
                 (setq magit-auto-revert-mode-lighter "")))
#+END_SRC
** monochrome-theme
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package monochrome-theme
    :idle 5)
#+END_SRC
** transpose-frame
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package transpose-frame
    :config (bind-key "M-|" 'transpose-frame hb-mode-map))
#+END_SRC
** winner-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package winner
    :ensure t
    :defer t
    :idle (winner-mode 1))
#+END_SRC
** windmove
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package windmove
    :ensure t
    :config (windmove-default-keybindings))
#+END_SRC
** writegood-mode
#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :idle-priority 5)
#+END_SRC
* macros
** follow-mode-80-char-compliant
Thanks to @EricCrosson.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun follow-mode-80-char-compliant()
    "Open the current buffer in `follow-mode' in as many 80-char
  windows as you can fit on this screen."
    (interactive)
    (delete-other-windows)
    (follow-mode 1)
    (let ((width (window-total-width nil 'floor)))
      (while (> width 80)
        (split-window-horizontally)
        (balance-windows)
        (setq width (window-total-width nil 'floor))))
    (delete-window)
    (balance-windows)
    (recenter-top-bottom))
#+END_SRC
** delete-trailing-whitespace-untabify
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun hb/delete-trailing-whitespace-untabify ()
    (interactive)
    (delete-trailing-whitespace (point-min) (point-max))
    (untabify (point-min) (point-max)))
  (add-hook 'before-save-hook 'hb/delete-trailing-whitespace-untabify)
#+END_SRC
** scroll-halfpage
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun window-half-height ()
    (max 1 (/ (1- (window-height (selected-window))) 2)))

  (defun hb/scroll-up-halfpage ()
    (interactive)
    (scroll-up (window-half-height)))

  (defun hb/scroll-down-halfpage ()
    (interactive)
    (scroll-down (window-half-height)))
#+END_SRC
* conclusion
#+BEGIN_SRC emacs-lisp

#+END_SRC

* [0/17] todos
** TODO :general: convert current configs to use-package
** TODO :hydra: configure hydras
** TODO :hydra: insert delimeters (), [], {}, etc
** TODO :emacs: macro to create 'BEGIN_SRC emacs-lisp :tangle yes' blocks
** TODO :autocomplete: test if auto-complete is working
** TODO :autocomplete:org: get ac-complete-org working
** TODO :org: find out how to use orgmode tags properly
Reference [[http://orgmode.org/manual/Tags.html][the org manual]].
** TODO :esc:ponder:general: take a look at writeroom mode
** TODO :magit:hydra: investigate if magit needs hydras
** TODO :magit: find out why magit doesn't work
** TODO :annoy:makefile: add hook to makefile-mode to tabify
** TODO :annoy:org: don't allow 'org-edit-special' to clobber my window config
** TODO :annoy: make something similar to esc's should-have functions
** TODO :org: add org-indent-mode hook
** TODO :annoy: delete-that-newly-opened-window
- add to movement hydra ("d"?)
** TODO :annoy: reopen-in-other-window
- add to movement hydra ("o"?)
** TODO custom mode
- turn on and off various minor modes
